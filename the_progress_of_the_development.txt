20200325
1.开始TaskTransitiveInference design;
1.1
把A(1-10的图片放入)，把B(11-20de图片放入)；


日志文件：
endOfTrial(successfulTrial, rew_scalar, callback);
successfulTrial点击是否正确；
// Scalar if you want to increase the reward on a particular trial (by multiplication)
    private static int rew_scalar = 1;
// Identifier for which monkey is currently playing the task
    private static int current_monkey, monkey_o =0, monkey_v =1;
开启面部识别之后，可以知道是哪只猴子，默认current_monkey=0；

这里可以使图片的位置随意动；
// Randomise cue locations
        UtilsTask.randomlyPositionCues(cues,  new UtilsTask().getPossibleCueLocs(getActivity()));

把图片固定在中心对称位置；修改上面这个函数；
这个图像的大小默认为300；("cue_size",300)
cue_size = sharedPrefs.getInt(r.getString(R.string.preftag_cue_size), r.getInteger(R.integer.default_cuesize));

给出所用可能的返回位置，用像素表示；
// Find possible locs along each dimension
        int[] xlocs = calculateLocs(screenWidth, totalImageSize);
        int[] ylocs = calculateLocs(screenHeight, totalImageSize);

参照TaskSpatialResponse.java的方法；移动位置方法；


可以参考其他任何，实现图像的切换；

20200326
task加入列表，activity_main_menu.xml；
<Spinner
    android:id="@+id/spinnerTaskMenu"
MainMenu.java line117
  Spinner spinner = (Spinner) findViewById(R.id.spinnerTaskMenu);
这里用到这个id;

line86执行intent;



后面就是选择，然后点击方框，出来TaskExample.java;
return inflater.inlfater(R.layout.activity_task_example, container, false);
开始loop.java就出来那两个选择的按钮；

同时修改，strings.xml文件，line16
<string-array name="available_tasks">
        <item>Training 1: Full screen cue</item>
        <item>Training 2: Shrinking central cue</item>
        <item>Training 3: Shrinking moving cue</item>
        <item>Training 4: Small Moving cue</item>
        <item>Training 5: Two step</item>
        <item>Example task</item>
.........................................................
        <item>Sequential Learning</item>
        <item>Random dot motion</item>

H05正常状态，蓝牙闪烁两下，停1s左右

/*
MainMenu.java的第288行；
taskSelected < 5，为何没有等于5的情况，就是task_example
*/

/*
TaskTransitiveInference.java中的line68
// Randomise cue locations
        UtilsTask.randomlyPositionCues(cues,  new UtilsTask().getPossibleCueLocs(getActivity()));
//以下这些注释掉就可以了，证明，前期写的相关的都是对的；
*/

20200330
可以实现固定按钮位置，cues[0].setX(150);//Monkey O Cue1
        cues[1].setX(500);//Monkey O Cue2
        cues[0].setY(500);//Monkey O Cue1
        cues[1].setY(500);//Monkey O Cue2
如何把图片插入到按钮上；
可以参考，D:\02ability\LearnJava\Mymou\Mymou-master20191011TwoFruitsMoveBananaRewardModifyLogOnlyBanana\Behavioural Testing Unit (Android)
以及其对日志文件的修改；

把按钮的参数由
<Button
            android:text="Monkey V\n Cue 1"
            android:layout_width="175dp"
            android:layout_height="175dp"
            android:textSize="30sp"
            android:id="@+id/buttonCue1MonkV"/>
修改为
 <Button
            android:text="  "
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textSize="30sp"
            android:id="@+id/buttonCue2MonkO"
            android:layout_gravity="center|bottom"
            android:gravity="center"
            android:background="@drawable/aa"/>

最麻烦的办法就是把70个图片都放在同一个位置，然后，选择性的显示；
设置按钮的属性；在layout中的.xml文件也可以设置属性，drawable文件一般存的是图片；
如何在activity里设置按钮的图片？
 private void assignObjects() {
        // Monkey 0 cues
        cues_all[monkey_o][0] = getView().findViewById(R.id.buttonCue1MonkO);
        cues_all[monkey_o][1] = getView().findViewById(R.id.buttonCue2MonkO);

一句话，就搞定，在activity中设置，button的背景图片；
cues_all[monkey_o][0].setBackgroundResource(R.drawable.aaaaa);
3.
下载可以加载图片了，然后考虑，如何把70个图片都加载上；

但是若是更改文件.xml中的id号，@+id/buttonCue1MonkO；
因为由两个文件都有这个号码，后续会不会出错；
改了之后，例如ti_buttonCue1MonkO就无法出现
后来的奖励选项，一定是这个跟奖励选项相关的，的buttonCue1MonkO没有修改，可以更进出看下；
3.1
android drawable下无法添加子目录，而且图片文件名必须是以字母开头，所以需要写个python脚本
把刺激集的名称前全部加一个a;
3.2
android开发如何再代码中间加上调试信息，输出需要的变量值；
3.3
设置断点，发现每次出现的时间；按钮出现的时间，

每次调用assignObjects()时就有一个新的界面？算作一次新的trail;

4.
main主界面多了一个Task Settings
是因为，PreferencesManager.java中多了一个public void SpatialResponse(){}函数；
然后在TaskManager.java中private void loadtask(){}中加入了一个case
在使用的activity中加入prefManager = new PreferencesManager(getContext());
        prefManager.SpatialResponse();
这样还是无法显示task settings;
所以有其他联系，想到activity_main_menu.xml文件中的区别；
在xml文件夹里看到，一个preferences_task_spatialresponse.xml文件；
而且这里，其他所有带task setting的任务，都在这里有个相应的.xml文件；并且规定了task setting里所有属性的最大值；
右击 find usages,发现在哪里引用了这个文件；
PrefsFragCommon.java;在这个文件了关联了preferences_task_spatialresponse.xml还是不可以；？？？
比如说这里有一句和这个功能相关的；<string name="preftag_task_sr_settings">preftag_task_sr_settings</string>
右击find usages可以查看所有的与这个相关的同步修改；

发现列表中5和15是没有的tasksetting，一定taskid有一个没有设置正确
在MainMenu.java中第五个也就task_example是false，而新增加的还没有；
<string-array name="task_has_settings">
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>false</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
        <item>true</item>
    </string-array>
添加一个true之后，task settings可以出现，但是，不是它自己的而是复制的另一个的为啥？
一直会链接到preferences_task_spatialresponse.xml不知道为啥？
调试了半天，就发现这个问题；
<string name="preftag_task_ti_settings">preftag_task_sl_settings</string>
这里的sl没有改为ti，所以默认一直往preferences_task_spatialresponse.xml跳转；
发现目标函数，用find usages可以判定在哪些地方被使用，或者用断点找到要被使用的；

在taskManager.java中，不必使用case13，为何少一个TaskRandomDotMotion();因为这里只有需要使用
因为没有使用preferencesManager.TaskRandomDotMotion();

*******可以仿照，TaskDiscreteMazeMapParams.java里的，public void LoadImageList(){}把所有照片做一个列表**********
android studio图片的命名规则：只能以小写字母和下划线做首字母，随后的名字中只能出现 [a-z0-9_.] 

ava 从List中随机取出一个元素

1  List<Integer> list = new ArrayList<>();
2         Random random = new Random();
3         int n = random.nextInt(list.size());
4         list.get(n);
